<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>good</title>
  
  <subtitle>一个正在培训前端的垃圾佬</subtitle>
  <link href="http://weiyang520.cn/atom.xml" rel="self"/>
  
  <link href="http://weiyang520.cn/"/>
  <updated>2022-10-31T12:45:19.888Z</updated>
  <id>http://weiyang520.cn/</id>
  
  <author>
    <name>weiyang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>typescript笔记(3)</title>
    <link href="http://weiyang520.cn/post/41247.html"/>
    <id>http://weiyang520.cn/post/41247.html</id>
    <published>2022-10-31T12:44:22.570Z</published>
    <updated>2022-10-31T12:45:19.888Z</updated>
    
    
    
    
    <category term="typescript笔记" scheme="http://weiyang520.cn/categories/typescript%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="typescript" scheme="http://weiyang520.cn/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>typescript笔记(2)-enum,type和interface</title>
    <link href="http://weiyang520.cn/post/61325.html"/>
    <id>http://weiyang520.cn/post/61325.html</id>
    <published>2022-10-31T02:10:19.417Z</published>
    <updated>2022-10-31T12:45:05.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="enum-类型"><a href="#enum-类型" class="headerlink" title="enum 类型"></a>enum 类型</h1><p><font color="red" size="5">用法:用于对数据做映射</font></p><h3 id="第一种用法"><a href="#第一种用法" class="headerlink" title="第一种用法"></a>第一种用法</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当后端传回的数据是1,2,3,4,分别对应不同的状态时,可以用enum做映射</span></span><br><span class="line"><span class="keyword">enum</span> person &#123;</span><br><span class="line">  <span class="string">&#x27;完成&#x27;</span> = <span class="number">1</span>, <span class="comment">//1表示真实值,&#x27;完成&#x27;表示映射值</span></span><br><span class="line">  <span class="string">&#x27;进行中&#x27;</span> = <span class="number">2</span>,</span><br><span class="line">  <span class="string">&#x27;未完成&#x27;</span> = <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: person = <span class="number">1</span> || person[<span class="string">&#x27;完成&#x27;</span>]</span><br><span class="line"><span class="comment">// a可以表示成1或者person[&#x27;完成&#x27;] ,当表示为person[&#x27;完成&#x27;] 时,会自动转换成1</span></span><br></pre></td></tr></table></figure><h3 id="第二种用法"><a href="#第二种用法" class="headerlink" title="第二种用法"></a>第二种用法</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于做权限控制时</span></span><br><span class="line"><span class="keyword">enum</span> authority &#123;</span><br><span class="line">  none = <span class="number">0</span>, <span class="comment">// 无权限 二进制表示为:0000</span></span><br><span class="line">  read = <span class="number">1</span> &lt;&lt; <span class="number">0</span>, <span class="comment">// 二进制表示为:0001</span></span><br><span class="line">  write = <span class="number">1</span> &lt;&lt; <span class="number">1</span>, <span class="comment">// 左移一位,二进制表示为:0010</span></span><br><span class="line">  remove = <span class="number">1</span> &lt;&lt; <span class="number">2</span>, <span class="comment">//左移两位,二进制表示为:0100</span></span><br><span class="line">  admin = read | write | remove <span class="comment">//管理员,二进制表示为: 0111</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">authority</span>: authority</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">authority</span>: <span class="number">0b0011</span> <span class="comment">// 0b表示后面的值为二进制</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 权限判断</span></span><br><span class="line"><span class="keyword">if</span> ((user.<span class="property">authority</span> &amp; authority.<span class="property">read</span>) === authority.<span class="property">read</span>) &#123;</span><br><span class="line">  <span class="comment">// 当用户的authority字段并上我们之前声明的authority类型里的某个权限还等于这个权限时</span></span><br><span class="line">  <span class="comment">//表示这个用户有这个权限,说明此用户的二进制包含了authority类型里的这个权限</span></span><br><span class="line">  <span class="comment">// 例如:当用户的权限二进制为0011时,包含了read的二进制0001</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((user.<span class="property">authority</span> &amp; authority.<span class="property">write</span>) === authority.<span class="property">write</span>) &#123;</span><br><span class="line">  <span class="comment">// 写权限</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 因为用户权限的的二进制为0011,同时包含了read,write,所以这里会同时打印1和2</span></span><br></pre></td></tr></table></figure><h1 id="type-和-interface"><a href="#type-和-interface" class="headerlink" title="type 和 interface"></a>type 和 interface</h1><h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><font color="blue">type用于给一个类型去一个别名,例如:</font><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="built_in">number</span></span><br><span class="line"><span class="comment">// 把A做了一个初始化,他的值就等于所以属于number这个属性的值</span></span><br><span class="line">*注意* <span class="keyword">type</span>无法重复声明</span><br><span class="line"><span class="keyword">type</span> A = <span class="built_in">string</span> <span class="comment">// 这里会报错,因为A已经声明成number了</span></span><br><span class="line"><span class="comment">//  可以使用交集</span></span><br><span class="line"><span class="keyword">type</span> B = A &amp; <span class="built_in">string</span> <span class="comment">// 这样B的值就等于number+string两个集合</span></span><br></pre></td></tr></table></figure><h2 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h2><font color="blue">interface用于声明接口(描述对象的属性),例如:</font><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="comment">// 索引签名的方式描述</span></span><br><span class="line">  <span class="comment">// [k: string]: number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 描述数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> B <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; &#123;</span><br><span class="line">  <span class="comment">// 额外的属性</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// type写法:</span></span><br><span class="line"><span class="comment">/* type B = Array&lt;string&gt; &#123;</span></span><br><span class="line"><span class="comment">  // 额外的属性</span></span><br><span class="line"><span class="comment">  name: string</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 描述函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Fn</span> &#123;</span><br><span class="line">  <span class="comment">// 括号里是参数,冒号后面是返回值的类型</span></span><br><span class="line">  (<span class="attr">a</span>: <span class="built_in">string</span>): <span class="built_in">void</span></span><br><span class="line">  <span class="comment">// 额外的属性</span></span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">Fn</span> = <span class="function"><span class="params">a</span> =&gt;</span> &#123;&#125;</span><br><span class="line">a.<span class="property">b</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 描述日期</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> C <span class="keyword">extends</span> <span class="title class_">Date</span> &#123;&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">c</span>: C = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br></pre></td></tr></table></figure><font color="red">type和interface的区别</font><br><font color="pink">区别1:interface只描述对象,type可以描述所有类型<br>区别2:type只是别名,interface是类型声明(面试可能问,我们实际使用基本无法感觉到差别)<br>区别3:type无法重新赋值(缺点是无法扩展),interface可以</font><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span>会自动合并, type不会</span><br><span class="line">例: <span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">c</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// A最终的类型是a,b,c的集合</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;enum-类型&quot;&gt;&lt;a href=&quot;#enum-类型&quot; class=&quot;headerlink&quot; title=&quot;enum 类型&quot;&gt;&lt;/a&gt;enum 类型&lt;/h1&gt;&lt;p&gt;&lt;font color=&quot;red&quot; size=&quot;5&quot;&gt;用法:用于对数据做映射&lt;/font&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="typescript笔记" scheme="http://weiyang520.cn/categories/typescript%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="typescript" scheme="http://weiyang520.cn/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>简介</title>
    <link href="http://weiyang520.cn/post/28581.html"/>
    <id>http://weiyang520.cn/post/28581.html</id>
    <published>2022-10-31T02:03:50.835Z</published>
    <updated>2022-10-31T02:03:50.835Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><hr><p><font color="Blue" size="4">你好,我是一名正在不断学习中的前端工程师,我比较懒,可能是因为我的追求没有那么高,有时候敲代码会发现时间过得很快,希望自己能越来越好吧<br></font></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;font color=&quot;Blue&quot; size=&quot;4&quot;&gt;你好,我是一名正在不断学习中的前端工程师,我比较懒,可能是因为我的追求没有</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>typescript笔记(1)-类型的描述</title>
    <link href="http://weiyang520.cn/post/60349.html"/>
    <id>http://weiyang520.cn/post/60349.html</id>
    <published>2022-10-26T12:44:49.000Z</published>
    <updated>2022-10-31T09:00:48.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ts-的类型"><a href="#ts-的类型" class="headerlink" title="ts 的类型"></a>ts 的类型</h1><hr><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ts包含了js所有类型并且新增了<span class="number">7</span>个类型, 分别是:</span><br><span class="line"><span class="built_in">void</span>,<span class="built_in">never</span>,<span class="keyword">enum</span>,<span class="built_in">unknown</span>,<span class="built_in">any</span></span><br><span class="line">两个自定义类型:</span><br><span class="line"><span class="keyword">type</span>,<span class="keyword">interface</span></span><br></pre></td></tr></table></figure><h2 id="正常情况下不用-object-因为-object-包含了-Array-Number-Function"><a href="#正常情况下不用-object-因为-object-包含了-Array-Number-Function" class="headerlink" title="正常情况下不用 object,因为 object 包含了 Array,Number,Function"></a><font color="red" size="4">正常情况下不用 object,因为 object 包含了 Array,Number,Function</font></h2><hr><h1 id="用类型签名和-Record-描述对象"><a href="#用类型签名和-Record-描述对象" class="headerlink" title="用类型签名和 Record 描述对象"></a>用类型签名和 Record 描述对象</h1><hr><h3 id="用-class-描述"><a href="#用-class-描述" class="headerlink" title="用 class 描述"></a>用 class 描述</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const a: Function = () =&gt; &#123;&#125;</span><br><span class="line">:号后面是变量a指定的类型</span><br></pre></td></tr></table></figure><h3 id="用-type-描述"><a href="#用-type-描述" class="headerlink" title="用 type 描述"></a>用 type 描述</h3><h4 id="第一种写法"><a href="#第一种写法" class="headerlink" title="第一种写法"></a>第一种写法</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;老王&#x27;</span></span><br><span class="line">  <span class="attr">age</span>:<span class="number">22</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第二种写法"><a href="#第二种写法" class="headerlink" title="第二种写法"></a>第二种写法</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = &#123;</span><br><span class="line">  [<span class="attr">k</span>: <span class="built_in">string</span>]: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// k 可以是任意字母,表示键,后面是类型</span></span><br><span class="line"><span class="comment">// 可以做键的类型有string,symbol,number</span></span><br></pre></td></tr></table></figure><p><font color="blue" size="4"><strong>注意</strong>:</font> 因为在 js 里,数字最终会变成字符串,所以也可以写成数字,如:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: A = &#123;</span><br><span class="line">  <span class="number">123</span>: <span class="number">123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第三种写法"><a href="#第三种写法" class="headerlink" title="第三种写法:"></a>第三种写法:</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">A2</span> = <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt;</span><br><span class="line">等同于第二种写法</span><br><span class="line"><span class="comment">// Record是一种泛型</span></span><br></pre></td></tr></table></figure><p><font color="#FF69B4">当我们用 object 类型去声明变量的时候,值可以为任何,因为 js 会包装对象,例如:</font></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="built_in">object</span> = <span class="number">123</span> <span class="comment">//这段代码不会报错,因为js把123包装成了对象</span></span><br><span class="line"><span class="comment">// 所以我们一般不使用object类型</span></span><br></pre></td></tr></table></figure><hr><hr><h3 id="数组对象的描述"><a href="#数组对象的描述" class="headerlink" title="数组对象的描述"></a>数组对象的描述</h3><h4 id="第一种写法-1"><a href="#第一种写法-1" class="headerlink" title="第一种写法"></a>第一种写法</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型加上[]</span></span><br><span class="line"><span class="keyword">type</span> A = <span class="built_in">string</span>[]</span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: A = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B = <span class="built_in">number</span>[]</span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: B = [<span class="number">42</span>, <span class="number">50</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 固定长度和类型,称为元组,几个元素为几元组</span></span><br><span class="line"><span class="keyword">type</span> C = [<span class="built_in">string</span>, <span class="built_in">string</span>]</span><br><span class="line"><span class="keyword">const</span> <span class="attr">arr</span>: C = [<span class="string">&#x27;我&#x27;</span>, <span class="string">&#x27;爱&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="第二种写法-1"><a href="#第二种写法-1" class="headerlink" title="第二种写法"></a>第二种写法</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt;</span><br><span class="line"><span class="keyword">type</span> B = <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt;</span><br><span class="line"><span class="comment">// 等价于第一种写法的类型加[]</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多层数组嵌套</span></span><br><span class="line"><span class="keyword">type</span> A = [<span class="built_in">string</span>[], <span class="built_in">number</span>[]]</span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: A = [</span><br><span class="line">  [<span class="string">&#x27;柴&#x27;</span>, <span class="string">&#x27;米&#x27;</span>, <span class="string">&#x27;油&#x27;</span>, <span class="string">&#x27;盐&#x27;</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><hr><h2 id="函数对象的描述"><a href="#函数对象的描述" class="headerlink" title="函数对象的描述"></a>函数对象的描述</h2><h4 id="第一种写法-2"><a href="#第一种写法-2" class="headerlink" title="第一种写法"></a>第一种写法</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明参数的个数,类型,函数返回值的类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FnA</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FnB</span> = <span class="function">(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">FnA</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: <span class="title class_">FnB</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;我&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="red">  注意, 使用函数的时候, 参数可以少传, 但不能多传 调用的时候必须和声明的参数个数和类型一样</font><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">a</span>(<span class="number">1</span>) <span class="comment">//这样会报错,因为只传了一个参数</span></span><br></pre></td></tr></table></figure><p><font color="#8B008B">当函数没有返回值的时候,我们可以这样写:<br></font></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">FnReturnVoid</span> = <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br></pre></td></tr></table></figure><h1 id="any-和-unknown"><a href="#any-和-unknown" class="headerlink" title="any 和 unknown"></a>any 和 unknown</h1><p><font color="blue">any 表示所有类型的集合,当声明为 any 时,值可以是任意类型</font></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="built_in">any</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p><font color="pink">unknown 表示事先并不知道这个值的类型,后续也可以通过断言追加类型</font></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: <span class="built_in">unknown</span> = <span class="number">1</span></span><br><span class="line">b.<span class="title function_">toFixed</span>() <span class="comment">// 会报错,因为类型是unknown,不知道类型,不能使用toFixed方法</span></span><br><span class="line"><span class="comment">//追加类型</span></span><br><span class="line">;(b <span class="keyword">as</span> <span class="built_in">number</span>) = <span class="number">1</span> <span class="comment">// 使用断言可以让b的类型变成number,则可以使用toFixed方法</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ts-的类型&quot;&gt;&lt;a href=&quot;#ts-的类型&quot; class=&quot;headerlink&quot; title=&quot;ts 的类型&quot;&gt;&lt;/a&gt;ts 的类型&lt;/h1&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g</summary>
      
    
    
    
    <category term="typescript笔记" scheme="http://weiyang520.cn/categories/typescript%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="typescript" scheme="http://weiyang520.cn/tags/typescript/"/>
    
  </entry>
  
</feed>
