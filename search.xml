<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="TS"><a href="#TS" class="headerlink" title="TS"></a>TS</h1><h2 id="TypeScrip1（基础类型）"><a href="#TypeScrip1（基础类型）" class="headerlink" title="TypeScrip1（基础类型）"></a>TypeScrip1（基础类型）</h2><p>基础类型：<a href="https://so.csdn.net/so/search?q=Boolean&spm=1001.2101.3001.7020">Boolean</a>、Number、String、<code>null</code>、<code>undefined</code> 以及 ES6 的 <a href="http://es6.ruanyifeng.com/#docs/symbol">Symbol</a> 和 ES10 的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt">BigInt</a>。</p><h3 id="1-字符串类型"><a href="#1-字符串类型" class="headerlink" title="1.字符串类型"></a>1.<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>类型</h3><p>字符串是使用 string 定义的</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">string</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="comment">//普通声明</span></span><br><span class="line"><span class="comment">//也可以使用es6的字符串模板</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">`dddd<span class="subst">$&#123;a&#125;</span>`</span></span><br></pre></td></tr></table></figure><h3 id="2-数字类型"><a href="#2-数字类型" class="headerlink" title="2.数字类型"></a>2.数字类型</h3><p>支持十六进制、十进制、八进制和<a href="https://so.csdn.net/so/search?q=%E4%BA%8C%E8%BF%9B%E5%88%B6&spm=1001.2101.3001.7020">二进制</a>；</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">notANumber</span>: <span class="built_in">number</span> = <span class="title class_">NaN</span> <span class="comment">//Nan</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: <span class="built_in">number</span> = <span class="number">123</span> <span class="comment">//普通数字</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">infinityNumber</span>: <span class="built_in">number</span> = <span class="title class_">Infinity</span> <span class="comment">//无穷大</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">decimal</span>: <span class="built_in">number</span> = <span class="number">6</span> <span class="comment">//十进制</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">hex</span>: <span class="built_in">number</span> = <span class="number">0xf00d</span> <span class="comment">//十六进制</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">binary</span>: <span class="built_in">number</span> = <span class="number">0b1010</span> <span class="comment">//二进制</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">octal</span>: <span class="built_in">number</span> = <span class="number">0o744</span> <span class="comment">//八进制s</span></span><br></pre></td></tr></table></figure><h3 id="3-布尔类型"><a href="#3-布尔类型" class="headerlink" title="3.布尔类型"></a>3.布尔类型</h3><p>注意，使用构造函数 <code>Boolean</code> 创造的对象<strong>不是</strong>布尔值：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">createdBoolean</span>: <span class="built_in">boolean</span> = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">//这样会报错 应为事实上 new Boolean() 返回的是一个 Boolean 对象</span></span><br></pre></td></tr></table></figure><p>事实上 new Boolean() 返回的是一个 Boolean 对象 需要改成</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">createdBoolean</span>: <span class="title class_">Boolean</span> = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">booleand</span>: <span class="built_in">boolean</span> = <span class="literal">true</span> <span class="comment">//可以直接使用布尔值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">booleand2</span>: <span class="built_in">boolean</span> = <span class="title class_">Boolean</span>(<span class="number">1</span>) <span class="comment">//也可以通过函数返回布尔值</span></span><br></pre></td></tr></table></figure><h3 id="4-空值类型"><a href="#4-空值类型" class="headerlink" title="4.空值类型"></a>4.空值类型</h3><p>JavaScript 没有空值（Void）的概念，在 <a href="https://so.csdn.net/so/search?q=TypeScript&spm=1001.2101.3001.7020">TypeScript</a> 中，可以用 <code>void</code> 表示没有任何返回值的函数</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">voidFn</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test void&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>void</code> 类型的用法，主要是用在我们<strong>不希望</strong>调用者关心函数返回值的情况下，比如通常的<strong>异步回调函数</strong></p><p><strong>void 也可以定义 undefined 和 null 类型</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="built_in">void</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="built_in">void</span> = <span class="literal">null</span></span><br></pre></td></tr></table></figure><h3 id="5-Null-和-undefined-类型"><a href="#5-Null-和-undefined-类型" class="headerlink" title="5.Null 和 undefined 类型"></a>5.Null 和 undefined 类型</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span> <span class="comment">//定义undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="literal">null</span> = <span class="literal">null</span> <span class="comment">//定义null</span></span><br></pre></td></tr></table></figure><p><strong>void 和 undefined 和 null 最大的区别</strong></p><p>与 <code>void</code> 的区别是，<code>undefined</code> 和 <code>null</code> 是所有类型的子类型。也就是说 <code>undefined</code> 类型的变量，可以赋值给 string 类型的变量：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样写会报错 void类型不可以分给其他类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test</span>: <span class="built_in">void</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num2</span>: <span class="built_in">string</span> = <span class="string">&#x27;1&#x27;</span></span><br><span class="line"></span><br><span class="line">num2 = test</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样是没问题的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test</span>: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num2</span>: <span class="built_in">string</span> = <span class="string">&#x27;1&#x27;</span></span><br><span class="line"></span><br><span class="line">num2 = test</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者这样的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num2</span>: <span class="built_in">string</span> = <span class="string">&#x27;1&#x27;</span></span><br><span class="line"></span><br><span class="line">num2 = test</span><br></pre></td></tr></table></figure><h3 id="TIPS-注意："><a href="#TIPS-注意：" class="headerlink" title="TIPS 注意："></a>TIPS 注意：</h3><p>如果你配置了 tsconfig.json 开启了严格模式</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;compilerOptions&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>**null 不能 赋予 void 类型**</strong> .就相当于 void 定义 undefined 和 null 类型会报错.</p><h2 id="TypeScrip2（任意类型）"><a href="#TypeScrip2（任意类型）" class="headerlink" title="TypeScrip2（任意类型）"></a>TypeScrip2（任意类型）</h2><h3 id="1-Any-类型-和-unknown-顶级类型"><a href="#1-Any-类型-和-unknown-顶级类型" class="headerlink" title="1.Any 类型 和 unknown 顶级类型"></a>1.Any 类型 和 unknown 顶级类型</h3><p>1.没有强制限定哪种类型，随时切换类型都可以 我们可以对 any 进行任何操作，不需要检查类型</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">anys</span>: <span class="built_in">any</span> = <span class="number">123</span></span><br><span class="line">anys = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">anys = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>2.声明变量的时候没有指定任意类型默认为 any</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> anys</span><br><span class="line">anys = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">anys = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>3.弊端如果使用 any 就失去了 TS 类型检测的作用</p><p>4.TypeScript 3.0 中引入的 unknown 类型也被认为是 top type ，但它更安全。与 any 一样，所有类型都可以分配给 unknown . unknow unknow 类型比 any 更加严格当你要使用 any 的时候可以尝试使用 unknow</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//unknown 可以定义任何类型的值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">unknown</span></span><br><span class="line"></span><br><span class="line">value = <span class="literal">true</span> <span class="comment">// OK</span></span><br><span class="line">value = <span class="number">42</span> <span class="comment">// OK</span></span><br><span class="line">value = <span class="string">&#x27;Hello World&#x27;</span> <span class="comment">// OK</span></span><br><span class="line">value = [] <span class="comment">// OK</span></span><br><span class="line">value = &#123;&#125; <span class="comment">// OK</span></span><br><span class="line">value = <span class="literal">null</span> <span class="comment">// OK</span></span><br><span class="line">value = <span class="literal">undefined</span> <span class="comment">// OK</span></span><br><span class="line">value = <span class="title class_">Symbol</span>(<span class="string">&#x27;type&#x27;</span>) <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这样写会报错unknow类型不能作为子类型只能作为父类型 any可以作为父类型和子类型</span></span><br><span class="line"><span class="comment">//unknown类型不能赋值给其他类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">names</span>: <span class="built_in">unknown</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">names2</span>: <span class="built_in">string</span> = names <span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这样就没问题 any类型是可以的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">names</span>: <span class="built_in">any</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">names2</span>: <span class="built_in">string</span> = names <span class="comment">//可以</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//unknown可赋值对象只有unknown 和 any</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">bbb</span>: <span class="built_in">unknown</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">aaa</span>: <span class="built_in">any</span> = <span class="string">&#x27;456&#x27;</span></span><br><span class="line"></span><br><span class="line">aaa = bbb</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">如果是<span class="built_in">any</span>类型在对象没有这个属性的时候还在获取是不会报错的</span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>:<span class="built_in">any</span> = &#123;<span class="attr">b</span>:<span class="number">1</span>&#125;</span><br><span class="line">obj.<span class="property">a</span></span><br><span class="line"></span><br><span class="line">如果是unknow 是不能调用属性和方法</span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>:<span class="built_in">unknown</span> = &#123;<span class="attr">b</span>:<span class="number">1</span>,<span class="attr">ccc</span>:():<span class="function"><span class="params">number</span>=&gt;</span><span class="number">213</span>&#125;</span><br><span class="line">obj.<span class="property">b</span></span><br><span class="line">obj.<span class="title function_">ccc</span>() <span class="comment">//报错</span></span><br></pre></td></tr></table></figure><h2 id="TypeScrip3（接口和对象类型）"><a href="#TypeScrip3（接口和对象类型）" class="headerlink" title="TypeScrip3（接口和对象类型）"></a>TypeScrip3（接口和对象类型）</h2><h3 id="对象的类型"><a href="#对象的类型" class="headerlink" title="对象的类型"></a>对象的类型</h3><p>在<a href="https://so.csdn.net/so/search?from=pc_blog_highlight&q=typescript">typescript</a>中，我们定义对象的方式要用关键字<strong>interface</strong>（接口），我的理解是使用<strong>interface</strong>来定义一种约束，让数据的结构满足约束的格式。定义方式如下：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样写是会报错的 因为我们在person定义了a，b但是对象里面缺少b属性</span></span><br><span class="line"><span class="comment">//使用接口约束的时候不能多一个属性也不能少一个属性</span></span><br><span class="line"><span class="comment">//必须与接口保持一致</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#x27;213&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重名interface  可以合并</span></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="attr">x</span>: A = &#123; <span class="attr">name</span>: <span class="string">&#x27;xx&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> B <span class="keyword">extends</span> A &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: B = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;string&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可选属性-使用-操作符"><a href="#可选属性-使用-操作符" class="headerlink" title="可选属性 使用?操作符"></a>可选属性 使用?操作符</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可选属性的含义是该属性可以不存在</span></span><br><span class="line"><span class="comment">//所以说这样写也是没问题的</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  b?: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#x27;213&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="任意属性-propName-string"><a href="#任意属性-propName-string" class="headerlink" title="任意属性 [propName: string]"></a>任意属性 [propName: string]</h3><p>需要注意的是，<strong>一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集</strong>：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在这个例子当中我们看到接口中并没有定义C但是并没有报错</span></span><br><span class="line"><span class="comment">//应为我们定义了[propName: string]: any;</span></span><br><span class="line"><span class="comment">//允许添加新的任意属性</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  b?: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">string</span></span><br><span class="line">  [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#x27;213&#x27;</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="只读属性-readonly"><a href="#只读属性-readonly" class="headerlink" title="只读属性 readonly"></a>只读属性 readonly</h3><p>readonly 只读属性是不允许被赋值的只能读取</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样写是会报错的</span></span><br><span class="line"><span class="comment">//应为a是只读的不允许重新赋值</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  b?: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">a</span>: <span class="built_in">string</span></span><br><span class="line">  [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#x27;213&#x27;</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person.<span class="property">a</span> = <span class="number">123</span> <span class="comment">//不可更改</span></span><br></pre></td></tr></table></figure><h3 id="添加函数"><a href="#添加函数" class="headerlink" title="添加函数"></a>添加函数</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  b?: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">a</span>: <span class="built_in">string</span></span><br><span class="line">  [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span></span><br><span class="line">  <span class="title function_">cb</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#x27;213&#x27;</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">  <span class="attr">cb</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TypeScrip4（数组类型）"><a href="#TypeScrip4（数组类型）" class="headerlink" title="TypeScrip4（数组类型）"></a>TypeScrip4（数组类型）</h2><h3 id="数组的类型"><a href="#数组的类型" class="headerlink" title="数组的类型"></a>数组的类型</h3><p>类型[ ]</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类型加中括号</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="built_in">number</span>[] = [<span class="number">123</span>]</span><br><span class="line"><span class="comment">//这样会报错定义了数字类型出现字符串是不允许的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;1&#x27;</span>]</span><br><span class="line"><span class="comment">//操作方法添加也是不允许的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="attr">arr</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">//数字类型的数组</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">arr2</span>: <span class="built_in">string</span>[] = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>] <span class="comment">//字符串类型的数组</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">arr3</span>: <span class="built_in">any</span>[] = [<span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>, <span class="literal">true</span>] <span class="comment">//任意类型的数组</span></span><br></pre></td></tr></table></figure><h3 id="数组泛型"><a href="#数组泛型" class="headerlink" title="数组泛型"></a>数组<a href="https://so.csdn.net/so/search?q=%E6%B3%9B%E5%9E%8B&spm=1001.2101.3001.7020">泛型</a></h3><p>规则 Array&lt;类型&gt;</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><h3 id="用接口表示数组"><a href="#用接口表示数组" class="headerlink" title="用接口表示数组"></a>用接口表示数组</h3><p>一般用来描述类数组</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">NumberArray</span> &#123;</span><br><span class="line">  [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">fibonacci</span>: <span class="title class_">NumberArray</span> = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment">//表示：只要索引的类型是数字时，那么值的类型必须是数字。</span></span><br></pre></td></tr></table></figure><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">data</span>: <span class="built_in">number</span>[][] = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="arguments-类数组"><a href="#arguments-类数组" class="headerlink" title="arguments 类数组"></a>arguments 类数组</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Arr</span>(<span class="params">...args: <span class="built_in">any</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">  <span class="comment">//错误的arguments 是类数组不能这样定义</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">arr</span>: <span class="built_in">number</span>[] = <span class="variable language_">arguments</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Arr</span>(<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Arr</span>(<span class="params">...args: <span class="built_in">any</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">  <span class="comment">//ts内置对象IArguments 定义</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">arr</span>: <span class="title class_">IArguments</span> = <span class="variable language_">arguments</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Arr</span>(<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//其中 IArguments 是 TypeScript 中定义好了的类型，它实际上就是：</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IArguments</span> &#123;</span><br><span class="line">  [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">any</span></span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">callee</span>: <span class="title class_">Function</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="any-在数组中的应用"><a href="#any-在数组中的应用" class="headerlink" title="any 在数组中的应用"></a>any 在数组中的应用</h3><p>一个常见的例子数组中可以存在任意类型</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: <span class="built_in">any</span>[] = [<span class="string">&#x27;test&#x27;</span>, <span class="number">1</span>, [], &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;]</span><br></pre></td></tr></table></figure><h2 id="TypeScrip5（函数扩展）"><a href="#TypeScrip5（函数扩展）" class="headerlink" title="TypeScrip5（函数扩展）"></a>TypeScrip5（函数扩展）</h2><h3 id="函数的类型"><a href="#函数的类型" class="headerlink" title="函数的类型"></a>函数的类型</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意，参数不能多传，也不能少传 必须按照约定的类型来</span></span><br><span class="line"><span class="keyword">const</span> fn = (<span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span>): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> name + age</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure><h3 id="函数的可选参数"><a href="#函数的可选参数" class="headerlink" title="函数的可选参数?"></a>函数的可选参数?</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过?表示该参数为可选参数</span></span><br><span class="line"><span class="keyword">const</span> fn = (<span class="attr">name</span>: <span class="built_in">string</span>, age?: <span class="built_in">number</span>): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> name + age</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&#x27;张三&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = (<span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;我是默认值&#x27;</span>): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> name</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><h3 id="接口定义函数"><a href="#接口定义函数" class="headerlink" title="接口定义函数"></a>接口定义函数</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义参数 num 和 num2  ：后面定义返回值的类型</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Add</span> &#123;</span><br><span class="line">  (<span class="attr">num</span>: <span class="built_in">number</span>, <span class="attr">num2</span>: <span class="built_in">number</span>): <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">fn</span>: <span class="title class_">Add</span> = (<span class="attr">num</span>: <span class="built_in">number</span>, <span class="attr">num2</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> num + num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUserInfo</span>(<span class="params">user: User</span>): <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> user</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义剩余参数"><a href="#定义剩余参数" class="headerlink" title="定义剩余参数"></a>定义剩余参数</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = (<span class="attr">array</span>: <span class="built_in">number</span>[], ...<span class="attr">items</span>: <span class="built_in">any</span>[]): <span class="built_in">any</span>[] =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(array, items)</span><br><span class="line">  <span class="keyword">return</span> items</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(a, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><p>重载是方法名字相同，而参数不同，返回类型可以相同也可以不同。</p><p>如果参数类型不同，则参数类型应设置为 <strong>any</strong>。</p><p>参数数量不同你可以将不同的参数设置为可选。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">params: <span class="built_in">number</span></span>): <span class="built_in">void</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">params: <span class="built_in">string</span>, params2: <span class="built_in">number</span></span>): <span class="built_in">void</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">params: <span class="built_in">any</span>, params2?: <span class="built_in">any</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(params)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(params2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&#x27;123&#x27;</span>, <span class="number">456</span>)</span><br></pre></td></tr></table></figure><h2 id="TypeScrip6（类型断言-联合类型-交叉类型）"><a href="#TypeScrip6（类型断言-联合类型-交叉类型）" class="headerlink" title="TypeScrip6（类型断言 | 联合类型 | 交叉类型）"></a>TypeScrip6（类型断言 | 联合类型 | 交叉类型）</h2><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如我们的手机号通常是13XXXXXXX 为数字类型 这时候产品说需要支持座机</span></span><br><span class="line"><span class="comment">//所以我们就可以使用联合类型支持座机字符串</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myPhone</span>: <span class="built_in">number</span> | <span class="built_in">string</span> = <span class="string">&#x27;010-820&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这样写是会报错的应为我们的联合类型只有数字和字符串并没有布尔值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myPhone</span>: <span class="built_in">number</span> | <span class="built_in">string</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment">//函数使用联合类型</span></span><br><span class="line"><span class="keyword">const</span> fn = (<span class="attr">something</span>: <span class="built_in">number</span> | <span class="built_in">boolean</span>): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> !!something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h3><p>多种类型的集合，联合对象将具有所联合类型的所有成员</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">People</span> &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">  height： <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Man</span>&#123;</span><br><span class="line">  <span class="attr">sex</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">xiaoman</span> = (<span class="params">man: People &amp; Man</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(man.<span class="property">age</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(man.<span class="property">height</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(man.<span class="property">sex</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">xiaoman</span>(&#123;<span class="attr">age</span>: <span class="number">18</span>,<span class="attr">height</span>: <span class="number">180</span>,<span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>语法：值 as 类型　　或　　&lt;类型&gt;值</p><p>​ value as string <string>value</string></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface A &#123;</span><br><span class="line">  <span class="attr">run</span>: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface B &#123;</span><br><span class="line">  <span class="attr">build</span>: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = (<span class="attr">type</span>: A | B): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> type.<span class="property">run</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这样写是有警告的,因为B的接口上面是没有定义run这个属性的</span></span><br></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">run</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">  <span class="attr">build</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = (<span class="attr">type</span>: A | B): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">type</span> <span class="keyword">as</span> A).<span class="property">run</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以使用类型断言来推断他传入的是A接口的值</span></span><br></pre></td></tr></table></figure><p>需要注意的是，类型断言只能够「欺骗」TypeScript 编译器，无法避免运行时的错误，反而滥用类型断言可能会导致运行时错误：</p><h3 id="使用-any-临时断言"><a href="#使用-any-临时断言" class="headerlink" title="使用 any 临时断言"></a>使用 any 临时断言</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">abc</span> = <span class="number">123</span>(</span><br><span class="line">  <span class="comment">//这样写会报错因为window没有abc这个东西</span></span><br><span class="line">  <span class="variable language_">window</span> <span class="keyword">as</span> <span class="built_in">any</span></span><br><span class="line">).<span class="property">abc</span> = <span class="number">123</span></span><br><span class="line"><span class="comment">//可以使用any临时断言在 any 类型的变量上，访问任何属性都是允许的。</span></span><br></pre></td></tr></table></figure><h4 id="as-const"><a href="#as-const" class="headerlink" title="as const"></a><code>as const</code></h4><p>是对字面值的<strong>断言</strong>，与 const 直接定义常量是有区别的</p><p>如果是普通类型跟直接 const 声明是一样的</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> names = <span class="string">&#x27;小满&#x27;</span></span><br><span class="line">names = <span class="string">&#x27;aa&#x27;</span> <span class="comment">//无法修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> names2 = <span class="string">&#x27;小满&#x27;</span> <span class="keyword">as</span> <span class="keyword">const</span></span><br><span class="line">names2 = <span class="string">&#x27;aa&#x27;</span> <span class="comment">//无法修改</span></span><br></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> a1 = [<span class="number">10</span>, <span class="number">20</span>] <span class="keyword">as</span> <span class="keyword">const</span></span><br><span class="line"><span class="keyword">const</span> a2 = [<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">a1.<span class="title function_">unshift</span>(<span class="number">30</span>) <span class="comment">// 错误，此时已经断言字面量为[10, 20],数据无法做任何修改</span></span><br><span class="line">a2.<span class="title function_">unshift</span>(<span class="number">30</span>) <span class="comment">// 通过，没有修改指针</span></span><br></pre></td></tr></table></figure><h3 id="类型断言是不具影响力的"><a href="#类型断言是不具影响力的" class="headerlink" title="类型断言是不具影响力的"></a>类型断言是不具影响力的</h3><p>在下面的例子中，将 something 断言为 <a href="https://so.csdn.net/so/search?q=boolean&spm=1001.2101.3001.7020">boolean</a> 虽然可以通过编译，但是并没有什么用 并不会影响结果, 因为编译过程中会删除类型断言</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">toBoolean</span>(<span class="params">something: <span class="built_in">any</span></span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> something <span class="keyword">as</span> <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">toBoolean</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 返回值为 1</span></span><br></pre></td></tr></table></figure><h2 id="TypeScrip7（内置对象）"><a href="#TypeScrip7（内置对象）" class="headerlink" title="TypeScrip7（内置对象）"></a>TypeScrip7（内置对象）</h2><p>JavaScript 中有很多<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects">内置对象</a>，它们可以直接在 <a href="https://so.csdn.net/so/search?q=TypeScript&spm=1001.2101.3001.7020">TypeScript</a> 中当做定义好了的类型。</p><h3 id="ECMAScript-的内置对象"><a href="#ECMAScript-的内置对象" class="headerlink" title="ECMAScript 的内置对象"></a><a href="https://so.csdn.net/so/search?q=ECMAScript&spm=1001.2101.3001.7020">ECMAScript</a> 的内置对象</h3><h4 id="Boolean、Number、string、RegExp、Date、Error"><a href="#Boolean、Number、string、RegExp、Date、Error" class="headerlink" title="Boolean、Number、string、RegExp、Date、Error"></a><strong><code>Boolean</code>、Number、<code>string</code>、<code>RegExp</code>、<code>Date</code>、<code>Error</code></strong></h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="title class_">Boolean</span> = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="title class_">Number</span> = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: <span class="title class_">String</span> = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;哔哩哔哩关注小满zs&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">d</span>: <span class="title class_">Date</span> = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">r</span>: <span class="title class_">RegExp</span> = <span class="regexp">/^1/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">e</span>: <span class="title class_">Error</span> = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;error!&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br></pre></td></tr></table></figure><h4 id="DOM-和-BOM-的内置对象"><a href="#DOM-和-BOM-的内置对象" class="headerlink" title="DOM 和 BOM 的内置对象"></a>DOM 和 BOM 的内置对象</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">body</span>: <span class="title class_">HTMLElement</span> = <span class="variable language_">document</span>.<span class="property">body</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">allDiv</span>: <span class="title class_">NodeList</span> = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="comment">//读取div 这种需要类型断言 或者加个判断应为读不到返回null</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">div</span>: <span class="title class_">HTMLElement</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>) <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e: MouseEvent</span>) &#123;&#125;)</span><br><span class="line"><span class="comment">//dom元素的映射表</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">HTMLElementTagNameMap</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="title class_">HTMLAnchorElement</span></span><br><span class="line">  <span class="attr">abbr</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">address</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">applet</span>: <span class="title class_">HTMLAppletElement</span></span><br><span class="line">  <span class="attr">area</span>: <span class="title class_">HTMLAreaElement</span></span><br><span class="line">  <span class="attr">article</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">aside</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">audio</span>: <span class="title class_">HTMLAudioElement</span></span><br><span class="line">  <span class="attr">b</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">base</span>: <span class="title class_">HTMLBaseElement</span></span><br><span class="line">  <span class="attr">bdi</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">bdo</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">blockquote</span>: <span class="title class_">HTMLQuoteElement</span></span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">HTMLBodyElement</span></span><br><span class="line">  <span class="attr">br</span>: <span class="title class_">HTMLBRElement</span></span><br><span class="line">  <span class="attr">button</span>: <span class="title class_">HTMLButtonElement</span></span><br><span class="line">  <span class="attr">canvas</span>: <span class="title class_">HTMLCanvasElement</span></span><br><span class="line">  <span class="attr">caption</span>: <span class="title class_">HTMLTableCaptionElement</span></span><br><span class="line">  <span class="attr">cite</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">code</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">col</span>: <span class="title class_">HTMLTableColElement</span></span><br><span class="line">  <span class="attr">colgroup</span>: <span class="title class_">HTMLTableColElement</span></span><br><span class="line">  <span class="attr">data</span>: <span class="title class_">HTMLDataElement</span></span><br><span class="line">  <span class="attr">datalist</span>: <span class="title class_">HTMLDataListElement</span></span><br><span class="line">  <span class="attr">dd</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">del</span>: <span class="title class_">HTMLModElement</span></span><br><span class="line">  <span class="attr">details</span>: <span class="title class_">HTMLDetailsElement</span></span><br><span class="line">  <span class="attr">dfn</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">dialog</span>: <span class="title class_">HTMLDialogElement</span></span><br><span class="line">  <span class="attr">dir</span>: <span class="title class_">HTMLDirectoryElement</span></span><br><span class="line">  <span class="attr">div</span>: <span class="title class_">HTMLDivElement</span></span><br><span class="line">  <span class="attr">dl</span>: <span class="title class_">HTMLDListElement</span></span><br><span class="line">  <span class="attr">dt</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">em</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">embed</span>: <span class="title class_">HTMLEmbedElement</span></span><br><span class="line">  <span class="attr">fieldset</span>: <span class="title class_">HTMLFieldSetElement</span></span><br><span class="line">  <span class="attr">figcaption</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">figure</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">font</span>: <span class="title class_">HTMLFontElement</span></span><br><span class="line">  <span class="attr">footer</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">form</span>: <span class="title class_">HTMLFormElement</span></span><br><span class="line">  <span class="attr">frame</span>: <span class="title class_">HTMLFrameElement</span></span><br><span class="line">  <span class="attr">frameset</span>: <span class="title class_">HTMLFrameSetElement</span></span><br><span class="line">  <span class="attr">h1</span>: <span class="title class_">HTMLHeadingElement</span></span><br><span class="line">  <span class="attr">h2</span>: <span class="title class_">HTMLHeadingElement</span></span><br><span class="line">  <span class="attr">h3</span>: <span class="title class_">HTMLHeadingElement</span></span><br><span class="line">  <span class="attr">h4</span>: <span class="title class_">HTMLHeadingElement</span></span><br><span class="line">  <span class="attr">h5</span>: <span class="title class_">HTMLHeadingElement</span></span><br><span class="line">  <span class="attr">h6</span>: <span class="title class_">HTMLHeadingElement</span></span><br><span class="line">  <span class="attr">head</span>: <span class="title class_">HTMLHeadElement</span></span><br><span class="line">  <span class="attr">header</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">hgroup</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">hr</span>: <span class="title class_">HTMLHRElement</span></span><br><span class="line">  <span class="attr">html</span>: <span class="title class_">HTMLHtmlElement</span></span><br><span class="line">  <span class="attr">i</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">iframe</span>: <span class="title class_">HTMLIFrameElement</span></span><br><span class="line">  <span class="attr">img</span>: <span class="title class_">HTMLImageElement</span></span><br><span class="line">  <span class="attr">input</span>: <span class="title class_">HTMLInputElement</span></span><br><span class="line">  <span class="attr">ins</span>: <span class="title class_">HTMLModElement</span></span><br><span class="line">  <span class="attr">kbd</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">label</span>: <span class="title class_">HTMLLabelElement</span></span><br><span class="line">  <span class="attr">legend</span>: <span class="title class_">HTMLLegendElement</span></span><br><span class="line">  <span class="attr">li</span>: <span class="title class_">HTMLLIElement</span></span><br><span class="line">  <span class="attr">link</span>: <span class="title class_">HTMLLinkElement</span></span><br><span class="line">  <span class="attr">main</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">map</span>: <span class="title class_">HTMLMapElement</span></span><br><span class="line">  <span class="attr">mark</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">marquee</span>: <span class="title class_">HTMLMarqueeElement</span></span><br><span class="line">  <span class="attr">menu</span>: <span class="title class_">HTMLMenuElement</span></span><br><span class="line">  <span class="attr">meta</span>: <span class="title class_">HTMLMetaElement</span></span><br><span class="line">  <span class="attr">meter</span>: <span class="title class_">HTMLMeterElement</span></span><br><span class="line">  <span class="attr">nav</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">noscript</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">object</span>: <span class="title class_">HTMLObjectElement</span></span><br><span class="line">  <span class="attr">ol</span>: <span class="title class_">HTMLOListElement</span></span><br><span class="line">  <span class="attr">optgroup</span>: <span class="title class_">HTMLOptGroupElement</span></span><br><span class="line">  <span class="attr">option</span>: <span class="title class_">HTMLOptionElement</span></span><br><span class="line">  <span class="attr">output</span>: <span class="title class_">HTMLOutputElement</span></span><br><span class="line">  <span class="attr">p</span>: <span class="title class_">HTMLParagraphElement</span></span><br><span class="line">  <span class="attr">param</span>: <span class="title class_">HTMLParamElement</span></span><br><span class="line">  <span class="attr">picture</span>: <span class="title class_">HTMLPictureElement</span></span><br><span class="line">  <span class="attr">pre</span>: <span class="title class_">HTMLPreElement</span></span><br><span class="line">  <span class="attr">progress</span>: <span class="title class_">HTMLProgressElement</span></span><br><span class="line">  <span class="attr">q</span>: <span class="title class_">HTMLQuoteElement</span></span><br><span class="line">  <span class="attr">rp</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">rt</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">ruby</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">s</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">samp</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">script</span>: <span class="title class_">HTMLScriptElement</span></span><br><span class="line">  <span class="attr">section</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">select</span>: <span class="title class_">HTMLSelectElement</span></span><br><span class="line">  <span class="attr">slot</span>: <span class="title class_">HTMLSlotElement</span></span><br><span class="line">  <span class="attr">small</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">source</span>: <span class="title class_">HTMLSourceElement</span></span><br><span class="line">  <span class="attr">span</span>: <span class="title class_">HTMLSpanElement</span></span><br><span class="line">  <span class="attr">strong</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">style</span>: <span class="title class_">HTMLStyleElement</span></span><br><span class="line">  <span class="attr">sub</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">summary</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">sup</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">table</span>: <span class="title class_">HTMLTableElement</span></span><br><span class="line">  <span class="attr">tbody</span>: <span class="title class_">HTMLTableSectionElement</span></span><br><span class="line">  <span class="attr">td</span>: <span class="title class_">HTMLTableDataCellElement</span></span><br><span class="line">  <span class="attr">template</span>: <span class="title class_">HTMLTemplateElement</span></span><br><span class="line">  <span class="attr">textarea</span>: <span class="title class_">HTMLTextAreaElement</span></span><br><span class="line">  <span class="attr">tfoot</span>: <span class="title class_">HTMLTableSectionElement</span></span><br><span class="line">  <span class="attr">th</span>: <span class="title class_">HTMLTableHeaderCellElement</span></span><br><span class="line">  <span class="attr">thead</span>: <span class="title class_">HTMLTableSectionElement</span></span><br><span class="line">  <span class="attr">time</span>: <span class="title class_">HTMLTimeElement</span></span><br><span class="line">  <span class="attr">title</span>: <span class="title class_">HTMLTitleElement</span></span><br><span class="line">  <span class="attr">tr</span>: <span class="title class_">HTMLTableRowElement</span></span><br><span class="line">  <span class="attr">track</span>: <span class="title class_">HTMLTrackElement</span></span><br><span class="line">  <span class="attr">u</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">ul</span>: <span class="title class_">HTMLUListElement</span></span><br><span class="line">  <span class="attr">var</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">  <span class="attr">video</span>: <span class="title class_">HTMLVideoElement</span></span><br><span class="line">  <span class="attr">wbr</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义-Promisea"><a href="#定义-Promisea" class="headerlink" title="定义 Promisea"></a>定义 Promisea</h3><p>如果我们不指定返回的类型 TS 是推断不出来返回的是什么类型</p><p>函数定义返回 promise 语法规则:Promise<T> 类型</T></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">promise</span>(<span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">promise</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="TypeScrip8（Class-类）"><a href="#TypeScrip8（Class-类）" class="headerlink" title="TypeScrip8（Class 类）"></a>TypeScrip8（Class 类）</h2><h3 id="ES6-类"><a href="#ES6-类" class="headerlink" title="ES6 类"></a>ES6 类</h3><p>ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过 class 关键字，可以定义类。基本上，ES6 的 class 可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的 class 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上面的代码用 ES6 的“类”改写，就是下面这样.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TS-是如何定义类的"><a href="#TS-是如何定义类的" class="headerlink" title="TS 是如何定义类的"></a>TS 是如何定义类的</h3><p>在<a href="https://so.csdn.net/so/search?q=TypeScript&spm=1001.2101.3001.7020">TypeScript</a>是不允许直接在 constructor 定义变量的 需要在 constructor 上面先声明</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="title function_">construtor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样引发了第二个问题你如果了定义了变量不用 也会报错 通常是给个默认值 或者 进行赋值</p><h3 id="类的修饰符"><a href="#类的修饰符" class="headerlink" title="类的修饰符"></a>类的修饰符</h3><p><strong>总共有三个 public private protected</strong></p><p>public :</p><p>使用 public 修饰符 可以让你定义的变量 内部访问 也可以外部访问 如果不写<strong>默认</strong>就是 public</p><p>private:</p><p>使用 private 修饰符 代表定义的变量私有的只能在内部访问 不能在外部访问</p><p>protected:</p><p>使用 protected 修饰符 代表定义的变量私有的只能在内部和继承的子类中访问 不能在外部访问</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="attr">some</span>: <span class="built_in">any</span></span><br><span class="line">  <span class="keyword">static</span> <span class="attr">nb</span>: <span class="built_in">string</span> <span class="comment">// 静态方法</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, ages: <span class="built_in">number</span>, some: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = ages</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">some</span> = some</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">nb</span> <span class="comment">//访问不到</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">jump</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">jump</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">run</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">some</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">create</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">some</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> xiaoman = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;小满&#x27;</span>, <span class="number">18</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> man = <span class="keyword">new</span> <span class="title class_">Man</span>()</span><br><span class="line">man.<span class="property">some</span> <span class="comment">// 访问不到</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">nb</span> <span class="comment">// 可以通过类名方位</span></span><br></pre></td></tr></table></figure><h3 id="static-静态属性-和-静态方法"><a href="#static-静态属性-和-静态方法" class="headerlink" title="static 静态属性 和 静态方法"></a>static 静态属性 和 静态方法</h3><p>我们用 static 定义的属性 不可以通过 this 去访问 只能通过类名去调用</p><p>static 静态函数 同样也是不能通过 this 去调用 也是通过类名去调用</p><p>需注意： 如果两个函数都是 static 静态的是可以通过 this 互相调用</p><p>见上图</p><h3 id="interface-定义-类"><a href="#interface-定义-类" class="headerlink" title="interface 定义 类"></a>interface 定义 类</h3><p>ts interface 定义类 使用关键字 implements 后面跟 interface 的名字多个用逗号隔开 继承还是用 extends</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonClass</span> &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="attr">type</span>: <span class="built_in">boolean</span>): <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonClass2</span> &#123;</span><br><span class="line">  <span class="title function_">set</span>(): <span class="built_in">void</span></span><br><span class="line">  <span class="attr">asd</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> <span class="keyword">implements</span> <span class="title class_">PersonClass</span>, <span class="title class_">PersonClass2</span> &#123;</span><br><span class="line">  <span class="attr">asd</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">asd</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"><span class="keyword">type</span>: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">type</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">set</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>应用场景如果你写的类实例化之后毫无用处此时我可以把他定义为抽象类</p><p>或者你也可以把他作为一个基类-&gt; 通过继承一个派生类去实现基类的一些方法</p><p>我们看例子</p><p>下面这段代码会报错抽象类无法被实例化</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title function_">A</span>()</span><br></pre></td></tr></table></figure><p>我们在 A 类定义了 getName 抽象方法但为实现</p><p>我们 B 类实现了 A 定义的抽象方法 如不实现就不报错 <strong>我们定义的抽象方法必须在派生类实现</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">print</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">getName</span>(): <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(<span class="string">&#x27;小满&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getName</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title function_">B</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="title function_">getName</span>())</span><br></pre></td></tr></table></figure><h2 id="TypeScrip9（元组类型）"><a href="#TypeScrip9（元组类型）" class="headerlink" title="TypeScrip9（元组类型）"></a>TypeScrip9（元组类型）</h2><p>如果需要一个固定大小的不同类型值的集合，我们需要使用<a href="https://so.csdn.net/so/search?q=%E5%85%83%E7%BB%84&spm=1001.2101.3001.7020">元组</a></p><h3 id="1-元组就是数组的变种"><a href="#1-元组就是数组的变种" class="headerlink" title="1.元组就是数组的变种"></a>1.元组就是<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E7%BB%84&spm=1001.2101.3001.7020">数组</a>的变种</h3><p><strong>元组（Tuple）是固定数量的不同类型的元素的组合</strong>。</p><p>元组与集合的不同之处在于，元组中的元素类型可以是不同的，而且数量固定。元组的好处在于可以把多个元素作为一个单元传递。如果一个方法需要返回多个值，可以把这多个值作为元组返回，而不需要创建额外的类来表示。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: [<span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="number">1</span>, <span class="string">&#x27;string&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: <span class="keyword">readonly</span> [<span class="built_in">number</span>, <span class="built_in">boolean</span>, <span class="built_in">string</span>, <span class="literal">undefined</span>] = [<span class="number">1</span>, <span class="literal">true</span>, <span class="string">&#x27;sring&#x27;</span>, <span class="literal">undefined</span>]</span><br></pre></td></tr></table></figure><p>当赋值或访问一个已知索引的元素时，会得到正确的类型：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: [<span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="number">1</span>, <span class="string">&#x27;string&#x27;</span>]</span><br><span class="line">arr[<span class="number">0</span>].<span class="property">length</span> <span class="comment">//error</span></span><br><span class="line">arr[<span class="number">1</span>].<span class="property">length</span> <span class="comment">//success</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数字是没有length 的</span></span><br></pre></td></tr></table></figure><h3 id="2-越界元素"><a href="#2-越界元素" class="headerlink" title="2.越界元素"></a>2.越界元素</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: [<span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="number">1</span>, <span class="string">&#x27;string&#x27;</span>]</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="literal">true</span>) <span class="comment">//error</span></span><br></pre></td></tr></table></figure><p>对于越界的元素他的类型被限制为 联合类型（就是你在元组中定义的类型）如下图</p><h3 id="3-应用场景-例如定义-execl-返回的数据"><a href="#3-应用场景-例如定义-execl-返回的数据" class="headerlink" title="3.应用场景 例如定义 execl 返回的数据"></a>3.<strong>应用场景 例如定义 execl 返回的数据</strong></h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">excel</span>: [<span class="built_in">string</span>, <span class="built_in">string</span>, <span class="built_in">number</span>, <span class="built_in">string</span>][] = [</span><br><span class="line">  [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;123&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;123&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;123&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;123&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;123&#x27;</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="TypeScrip10（枚举类型）"><a href="#TypeScrip10（枚举类型）" class="headerlink" title="TypeScrip10（枚举类型）"></a>TypeScrip10（枚举类型）</h2><p>在 javaScript 中是没有<a href="https://so.csdn.net/so/search?q=%E6%9E%9A%E4%B8%BE&spm=1001.2101.3001.7020">枚举</a>的概念的 TS 帮我们定义了枚举这个类型</p><p><strong>使用枚举 通过 enum 关键字定义我们的枚举</strong></p><h3 id="1-数字枚举"><a href="#1-数字枚举" class="headerlink" title="1.数字枚举"></a>1.数字枚举</h3><p>例如 红绿蓝 Red &#x3D; 0 Green &#x3D; 1 Blue&#x3D; 2 分别代表红色 0 绿色为 1 蓝色为 2</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span>,</span><br><span class="line">  <span class="title class_">Green</span>,</span><br><span class="line">  <span class="title class_">BLue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写就可以实现应为 ts 定义的枚举中的每一个组员默认都是从 0 开始的所以也就是</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span> = <span class="number">0</span>,</span><br><span class="line">  <span class="title class_">Green</span> = <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">BLue</span> = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//默认就是从0开始的 可以不写值</span></span><br></pre></td></tr></table></figure><p>增长枚举</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">Green</span>,</span><br><span class="line">  <span class="title class_">BLue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，我们定义了一个数字枚举， Red 使用初始化为 <code>1</code>。 其余的成员会从 <code>1</code>开始自动增长。 换句话说， Type<code>.Red</code>的值为 <code>1</code>， <code>Green</code>为 <code>2</code>， <code>Blue</code>为 <code>3</code>。</p><h3 id="2-字符串枚举"><a href="#2-字符串枚举" class="headerlink" title="2.字符串枚举"></a>2.字符串枚举</h3><p>字符串枚举的概念很简单。 在一个字符串枚举里，每个成员都必须用字符串字面量，或另外一个字符串枚举成员进行初始化。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span> = <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">  <span class="title class_">Green</span> = <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">  <span class="title class_">BLue</span> = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于字符串枚举没有自增长的行为，字符串枚举可以很好的序列化。 换句话说，如果你正在调试并且必须要读一个数字枚举的运行时的值，这个值通常是很难读的 - 它并不能表达有用的信息，字符串枚举允许你提供一个运行时有意义的并且可读的值，独立于枚举成员的名字。</p><h3 id="3-异构枚举"><a href="#3-异构枚举" class="headerlink" title="3.异构枚举"></a>3.异构枚举</h3><p>枚举可以混合字符串和数字成员</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span> &#123;</span><br><span class="line">  <span class="title class_">No</span> = <span class="string">&#x27;No&#x27;</span>,</span><br><span class="line">  <span class="title class_">Yes</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-接口枚举"><a href="#4-接口枚举" class="headerlink" title="4.接口枚举"></a>4.接口枚举</h3><p>定义一个枚举 Types 定义一个接口 A 他有一个属性 red 值为 Types.yyds</p><p>声明对象的时候要遵循这个规则</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span> &#123;</span><br><span class="line">  yyds,</span><br><span class="line">  dddd</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">red</span>: <span class="title class_">Types</span>.<span class="property">yyds</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: A = &#123;</span><br><span class="line">  <span class="attr">red</span>: <span class="title class_">Types</span>.<span class="property">yyds</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-const枚举"><a href="#5-const枚举" class="headerlink" title="5.const枚举"></a><code>5.const</code>枚举</h3><p>let 和 var 都是不允许的声明只能使用 const</p><p>大多数情况下，枚举是十分有效的方案。 然而在某些情况下需求很严格。 为了避免在额外生成的代码上的开销和额外的非直接的对枚举成员的访问，我们可以使用 <code>const</code>枚举。 常量枚举通过在枚举上使用 <code>const</code>修饰符来定义</p><p>const 声明的枚举会被编译成常量</p><p>普通声明的枚举编译完后是个对象</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">Types</span> &#123;</span><br><span class="line">  <span class="title class_">No</span> = <span class="string">&#x27;No&#x27;</span>,</span><br><span class="line">  <span class="title class_">Yes</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-反向映射"><a href="#6-反向映射" class="headerlink" title="6.反向映射"></a>6.反向映射</h3><p>它包含了正向映射（ <code>name</code> -&gt; <code>value</code>）和反向映射（ <code>value</code> -&gt; <code>name</code>）</p><p>要注意的是 <em>不会</em>为字符串枚举成员生成反向映射。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Enum</span> &#123;</span><br><span class="line">  fall</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="title class_">Enum</span>.<span class="property">fall</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">//0</span></span><br><span class="line"><span class="keyword">let</span> nameOfA = <span class="title class_">Enum</span>[a]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nameOfA) <span class="comment">//fall</span></span><br></pre></td></tr></table></figure><h2 id="TypeScrip11（类型推论-类型别名）"><a href="#TypeScrip11（类型推论-类型别名）" class="headerlink" title="TypeScrip11（类型推论|类型别名）"></a>TypeScrip11（类型推论|类型别名）</h2><h3 id="什么是类型推论"><a href="#什么是类型推论" class="headerlink" title="什么是类型推论"></a>什么是类型推论</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;小满zs&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="1-我声明了一个变量但是没有定义类型"><a href="#1-我声明了一个变量但是没有定义类型" class="headerlink" title="1.我声明了一个变量但是没有定义类型"></a>1.我声明了一个变量但是没有定义类型</h4><p><a href="https://so.csdn.net/so/search?q=TypeScript&spm=1001.2101.3001.7020">TypeScript</a> 会在没有明确的指定类型的时候推测出一个类型，这就是类型推论</p><p>所以 TS 帮我推断出来这是一个<a href="https://so.csdn.net/so/search?q=string%E7%B1%BB&spm=1001.2101.3001.7020">string 类</a>型,不能够在赋值给别的类型</p><h4 id="2-如果你声明变量没有定义类型也没有赋值这时候-TS-会推断成-any-类型可以进行任何操作"><a href="#2-如果你声明变量没有定义类型也没有赋值这时候-TS-会推断成-any-类型可以进行任何操作" class="headerlink" title="2.如果你声明变量没有定义类型也没有赋值这时候 TS 会推断成 any 类型可以进行任何操作"></a>2.如果你声明变量没有定义类型也没有赋值这时候 TS 会推断成 any 类型可以进行任何操作</h4><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p>type 关键字（可以给一个类型定义一个名字）多用于符合类型</p><p>定义类型别名</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> str = <span class="built_in">string</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: str = <span class="string">&#x27;我是小满&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br></pre></td></tr></table></figure><p>定义函数别名</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> str = <span class="function">() =&gt;</span> <span class="built_in">string</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: str = <span class="function">() =&gt;</span> <span class="string">&#x27;我是小满&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br></pre></td></tr></table></figure><p>定义联合类型别名</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> str = <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: str = <span class="number">123</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">s2</span>: str = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s, s2)</span><br></pre></td></tr></table></figure><p>定义值的别名</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> value = <span class="built_in">boolean</span> | <span class="number">0</span> | <span class="string">&#x27;213&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: value = <span class="literal">true</span></span><br><span class="line"><span class="comment">//变量s的值  只能是上面value定义的值</span></span><br></pre></td></tr></table></figure><h2 id="TypeScrip12（never-类型）"><a href="#TypeScrip12（never-类型）" class="headerlink" title="TypeScrip12（never 类型）"></a>TypeScrip12（never 类型）</h2><p><a href="https://so.csdn.net/so/search?q=TypeScript&spm=1001.2101.3001.7020">TypeScript</a> 将使用 never 类型来表示不应该存在的状态</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"><span class="comment">// 因为必定抛出异常，所以 error 将不会有返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 因为存在死循环，所以 loop 将不会有返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="never-与-void-的差异"><a href="#never-与-void-的差异" class="headerlink" title="never 与 void 的差异"></a>never 与 <code>void</code> 的差异</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//void类型只是没有返回值 但本身不会出错</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Void</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只会抛出异常没有返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Never</span>(<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="never-类型的一个应用场景"><a href="#never-类型的一个应用场景" class="headerlink" title="never 类型的一个应用场景"></a>never 类型的一个应用场景</h3><p>举一个我们可能会见到的例子</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">All</span> = A | B</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleValue</span>(<span class="params">val: All</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (val.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;foo&#x27;</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;bar&#x27;</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="comment">//兜底逻辑 一般是不会进入这儿如果进来了就是程序异常了</span></span><br><span class="line">      <span class="keyword">const</span> <span class="attr">exhaustiveCheck</span>: <span class="built_in">never</span> = val</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如新来了一个同事他新增了一个 C 接口，我们必须手动找到所有 switch 代码并处理，否则将有可能引入 BUG 。</p><p>而且这将是一个“隐蔽型”的 BUG，如果回归面不够广，很难发现此类 BUG。</p><p>那 TS 有没有办法帮助我们在类型检查阶段发现这个问题呢</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> C &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;bizz&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">All</span> = A | B | C</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleValue</span>(<span class="params">val: All</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (val.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;foo&#x27;</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;bar&#x27;</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="comment">//兜底逻辑 一般是不会进入这儿如果进来了就是程序异常了</span></span><br><span class="line">      <span class="keyword">const</span> <span class="attr">exhaustiveCheck</span>: <span class="built_in">never</span> = val</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于任何类型都不能赋值给 <code>never</code> 类型的变量，所以当存在进入 <code>default</code> 分支的可能性时，TS 的类型检查会及时帮我们发现这个问题</p><h2 id="TypeScrip13（symbol-类型）"><a href="#TypeScrip13（symbol-类型）" class="headerlink" title="TypeScrip13（symbol 类型）"></a>TypeScrip13（symbol 类型）</h2><p><code>symbol</code>类型的值是通过<code>Symbol</code><a href="https://so.csdn.net/so/search?q=%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0&spm=1001.2101.3001.7020">构造函数</a>创建的。</p><p>可以传递参做为唯一标识 只支持 string 和 <a href="https://so.csdn.net/so/search?q=number%E7%B1%BB&spm=1001.2101.3001.7020">number 类</a>型的参数</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym1 = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="keyword">let</span> sym2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;key&#x27;</span>) <span class="comment">// 可选的字符串key</span></span><br></pre></td></tr></table></figure><h3 id="Symbol-的值是唯一的"><a href="#Symbol-的值是唯一的" class="headerlink" title="Symbol 的值是唯一的"></a>Symbol 的值是唯一的</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="comment">// s1 === s2 =&gt;false</span></span><br></pre></td></tr></table></figure><h3 id="用作对象属性的键"><a href="#用作对象属性的键" class="headerlink" title="用作对象属性的键"></a>用作对象属性的键</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [sym]: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[sym]) <span class="comment">// &quot;value&quot;</span></span><br></pre></td></tr></table></figure><h3 id="使用-symbol-定义的属性，是不能通过如下方式遍历拿到的"><a href="#使用-symbol-定义的属性，是不能通过如下方式遍历拿到的" class="headerlink" title="使用 symbol 定义的属性，是不能通过如下方式遍历拿到的"></a>使用 symbol 定义的属性，是不能通过如下方式遍历拿到的</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> symbol1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;666&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> symbol2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;777&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  [symbol1]: <span class="string">&#x27;小满&#x27;</span>,</span><br><span class="line">  [symbol2]: <span class="string">&#x27;二蛋&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 for in 遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">  <span class="comment">// 注意在console看key,是不是没有遍历到symbol1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 Object.keys 遍历</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj1))</span><br><span class="line"><span class="comment">// 3 getOwnPropertyNames</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(obj1))</span><br><span class="line"><span class="comment">// 4 JSON.stringfy</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj1))</span><br></pre></td></tr></table></figure><p>那么如何拿到呢</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 拿到具体的symbol 属性,对象中有几个就会拿到几个</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj1))</span><br><span class="line"><span class="comment">// 2 es6 的 Reflect 拿到对象的所有属性</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj1))</span><br></pre></td></tr></table></figure><h3 id="Symbol-iterator-迭代器-和-生成器-for-of"><a href="#Symbol-iterator-迭代器-和-生成器-for-of" class="headerlink" title="Symbol.iterator 迭代器 和 生成器 for of"></a>Symbol.iterator 迭代器 和 生成器 for of</h3><p>支持遍历大部分类型迭代器 arr nodeList argumetns set map 等</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> iterator = arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()) <span class="comment">//&#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()) <span class="comment">//&#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()) <span class="comment">//&#123; value: 3, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()) <span class="comment">//&#123; value: 4, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()) <span class="comment">//&#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><p>测试用例</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Item</span> &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">array</span>: <span class="title class_">Array</span>&lt;<span class="title class_">Item</span>&gt; = [</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">123</span>, <span class="attr">name</span>: <span class="string">&#x27;1&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">123</span>, <span class="attr">name</span>: <span class="string">&#x27;2&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">123</span>, <span class="attr">name</span>: <span class="string">&#x27;3&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> mapTypes = <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">map</span>: <span class="title class_">Map</span>&lt;mapTypes, mapTypes&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;王爷&#x27;</span>)</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;陆北&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">aaa</span>: <span class="number">123</span>,</span><br><span class="line">  <span class="attr">bbb</span>: <span class="number">456</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">set</span>: <span class="title class_">Set</span>&lt;<span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="comment">// let it:Iterator&lt;Item&gt; = array[Symbol.iterator]()</span></span><br><span class="line"><span class="keyword">const</span> gen = (<span class="attr">erg</span>: <span class="built_in">any</span>): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">it</span>: <span class="title class_">Iterator</span>&lt;<span class="built_in">any</span>&gt; = erg[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">next</span>: <span class="built_in">any</span> = &#123; <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">  <span class="keyword">while</span> (!next.<span class="property">done</span>) &#123;</span><br><span class="line">    next = it.<span class="title function_">next</span>()</span><br><span class="line">    <span class="keyword">if</span> (!next.<span class="property">done</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(next.<span class="property">value</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">gen</span>(array)</span><br></pre></td></tr></table></figure><p>以下为这些 symbols 的列表：</p><p>Symbol.hasInstance<br>方法，会被 instanceof 运算符调用。构造器对象用来识别一个对象是否是其实例。</p><p>Symbol.isConcatSpreadable<br>布尔值，表示当在一个对象上调用 Array.prototype.concat 时，这个对象的数组元素是否可展开。</p><p>Symbol.iterator<br>方法，被 for-of 语句调用。返回对象的默认迭代器。</p><p>Symbol.match<br>方法，被 String.prototype.match 调用。正则表达式用来匹配字符串。</p><p>Symbol.replace<br>方法，被 String.prototype.replace 调用。正则表达式用来替换字符串中匹配的子串。</p><p>Symbol.search<br>方法，被 String.prototype.search 调用。正则表达式返回被匹配部分在字符串中的索引。</p><p>Symbol.species<br>函数值，为一个构造函数。用来创建派生对象。</p><p>Symbol.split<br>方法，被 String.prototype.split 调用。正则表达式来用分割字符串。</p><p>Symbol.toPrimitive<br>方法，被 ToPrimitive 抽象操作调用。把对象转换为相应的原始值。</p><p>Symbol.toStringTag<br>方法，被内置方法 Object.prototype.toString 调用。返回创建对象时默认的字符串描述。</p><p>Symbol.unscopables<br>对象，它自己拥有的属性会被 with 作用域排除在外。</p><h2 id="TypeScript14（泛型）"><a href="#TypeScript14（泛型）" class="headerlink" title="TypeScript14（泛型）"></a>TypeScript14（泛型）</h2><p><a href="https://so.csdn.net/so/search?q=%E6%B3%9B%E5%9E%8B&spm=1001.2101.3001.7020">泛型</a>在 TypeScript 是很重要的东西 例如 vue3 是用 ts 编写的 里面用到了非常多的泛型</p><h3 id="函数泛型"><a href="#函数泛型" class="headerlink" title="函数泛型"></a>函数泛型</h3><p>我写了两个函数一个是数字类型的函数，另一个是<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>类型的函数,其实就是类型不同，</p><p>实现的功能是一样的，这时候我们就可以使用泛型来优化</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">num</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [a, b]</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">num</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">str</span>(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span></span>): <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [a, b]</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">str</span>(<span class="string">&#x27;独孤&#x27;</span>, <span class="string">&#x27;求败&#x27;</span>)</span><br></pre></td></tr></table></figure><p>泛型优化</p><p>语法为函数名字后面跟一个&lt;参数名&gt; 参数名可以随便写 例如我这儿写了 T, 当我们使用这个函数的时候把参数的类型传进去就可以了 （也就是动态类型）</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title class_">Add</span>&lt;T&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: T): <span class="title class_">Array</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [a, b]</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Add</span>&lt;<span class="built_in">number</span>&gt;(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="title class_">Add</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br></pre></td></tr></table></figure><p>我们也可以使用不同的泛型参数名，只要在数量上和使用方式上能对应上就可以。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title class_">Sub</span>&lt;T, U&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: U): <span class="title class_">Array</span>&lt;T | U&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">params</span>: <span class="title class_">Array</span>&lt;T | U&gt; = [a, b]</span><br><span class="line">  <span class="keyword">return</span> params</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Sub</span>&lt;<span class="title class_">Boolean</span>, <span class="built_in">number</span>&gt;(<span class="literal">false</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="定义泛型接口"><a href="#定义泛型接口" class="headerlink" title="定义泛型接口"></a>定义泛型接口</h3><p>声明接口的时候 在名字后面加一个&lt;参数&gt;</p><p>使用的时候传递类型</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInter</span>&lt;T&gt; &#123;</span><br><span class="line">  (<span class="attr">arg</span>: T): T</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> fn&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">result</span>: <span class="title class_">MyInter</span>&lt;<span class="built_in">number</span>&gt; = fn</span><br><span class="line"><span class="title function_">result</span>(<span class="number">123</span>)</span><br></pre></td></tr></table></figure><h3 id="对象字面量泛型"><a href="#对象字面量泛型" class="headerlink" title="对象字面量泛型"></a>对象字面量泛型</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">foo</span>: &#123; &lt;T&gt;(<span class="attr">arg</span>: T): T &#125;</span><br><span class="line">foo = <span class="keyword">function</span> &lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">123</span>)</span><br></pre></td></tr></table></figure><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>我们期望在一个泛型的变量上面，获取其<code>length</code>参数，但是，有的数据类型是没有<code>length</code>属性的</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> getLegnth&lt;T&gt;(<span class="attr">arg</span>: T) &#123;</span><br><span class="line">  <span class="keyword">return</span> arg.<span class="property">length</span></span><br><span class="line">&#125; <span class="comment">//类型&quot;T&quot;上不存在属性&quot;length&quot;</span></span><br></pre></td></tr></table></figure><p>这时候我们就可以使用泛型约束</p><p>于是，我们就得对使用的泛型进行约束，我们约束其为具有<code>length</code>属性的类型，这里我们会用到<code>interface</code>,代码如下</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Len</span> &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> getLegnth&lt;T <span class="keyword">extends</span> <span class="title class_">Len</span>&gt;(<span class="attr">arg</span>: T) &#123;</span><br><span class="line">  <span class="keyword">return</span> arg.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line">getLegnth&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="使用-keyof-约束对象"><a href="#使用-keyof-约束对象" class="headerlink" title="使用 keyof 约束对象"></a>使用 keyof 约束对象</h3><p>其中使用了 TS 泛型和泛型约束。首先定义了 T 类型并使用 extends 关键字继承 object 类型的子类型，然后使用 keyof 操作符获取 T 类型的所有键，它的返回 类型是联合 类型，最后利用 extends 关键字约束 K 类型必须为 keyof T 联合类型的子类型</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> prop&lt;T, K <span class="keyword">extends</span> keyof T&gt;(<span class="attr">obj</span>: T, <span class="attr">key</span>: K) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> o = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;</span><br><span class="line"><span class="title function_">prop</span>(o, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="title function_">prop</span>(o, <span class="string">&#x27;d&#x27;</span>) <span class="comment">//此时就会报错发现找不到</span></span><br></pre></td></tr></table></figure><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>声明方法跟函数类似名称后面定义&lt;类型&gt;</p><p>使用的时候确定类型 new Sub<number>()</number></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">attr</span>: T[] = []</span><br><span class="line">  <span class="title function_">add</span>(<span class="attr">a</span>: T): T[] &#123;</span><br><span class="line">    <span class="keyword">return</span> [a]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Sub</span>&lt;<span class="built_in">number</span>&gt;()</span><br><span class="line">s.<span class="property">attr</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="keyword">new</span> <span class="title class_">Sub</span>&lt;<span class="built_in">string</span>&gt;()</span><br><span class="line">str.<span class="property">attr</span> = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line">str.<span class="title function_">add</span>(<span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript笔记(3)</title>
      <link href="/post/41247.html"/>
      <url>/post/41247.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> typescript笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript笔记(2)-enum,type和interface</title>
      <link href="/post/61325.html"/>
      <url>/post/61325.html</url>
      
        <content type="html"><![CDATA[<h1 id="enum-类型"><a href="#enum-类型" class="headerlink" title="enum 类型"></a>enum 类型</h1><p><font color="red" size="5">用法:用于对数据做映射</font></p><h3 id="第一种用法"><a href="#第一种用法" class="headerlink" title="第一种用法"></a>第一种用法</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当后端传回的数据是1,2,3,4,分别对应不同的状态时,可以用enum做映射</span></span><br><span class="line"><span class="keyword">enum</span> person &#123;</span><br><span class="line">  <span class="string">&#x27;完成&#x27;</span> = <span class="number">1</span>, <span class="comment">//1表示真实值,&#x27;完成&#x27;表示映射值</span></span><br><span class="line">  <span class="string">&#x27;进行中&#x27;</span> = <span class="number">2</span>,</span><br><span class="line">  <span class="string">&#x27;未完成&#x27;</span> = <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: person = <span class="number">1</span> || person[<span class="string">&#x27;完成&#x27;</span>]</span><br><span class="line"><span class="comment">// a可以表示成1或者person[&#x27;完成&#x27;] ,当表示为person[&#x27;完成&#x27;] 时,会自动转换成1</span></span><br></pre></td></tr></table></figure><h3 id="第二种用法"><a href="#第二种用法" class="headerlink" title="第二种用法"></a>第二种用法</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于做权限控制时</span></span><br><span class="line"><span class="keyword">enum</span> authority &#123;</span><br><span class="line">  none = <span class="number">0</span>, <span class="comment">// 无权限 二进制表示为:0000</span></span><br><span class="line">  read = <span class="number">1</span> &lt;&lt; <span class="number">0</span>, <span class="comment">// 二进制表示为:0001</span></span><br><span class="line">  write = <span class="number">1</span> &lt;&lt; <span class="number">1</span>, <span class="comment">// 左移一位,二进制表示为:0010</span></span><br><span class="line">  remove = <span class="number">1</span> &lt;&lt; <span class="number">2</span>, <span class="comment">//左移两位,二进制表示为:0100</span></span><br><span class="line">  admin = read | write | remove <span class="comment">//管理员,二进制表示为: 0111</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">authority</span>: authority</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">authority</span>: <span class="number">0b0011</span> <span class="comment">// 0b表示后面的值为二进制</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 权限判断</span></span><br><span class="line"><span class="keyword">if</span> ((user.<span class="property">authority</span> &amp; authority.<span class="property">read</span>) === authority.<span class="property">read</span>) &#123;</span><br><span class="line">  <span class="comment">// 当用户的authority字段并上我们之前声明的authority类型里的某个权限还等于这个权限时</span></span><br><span class="line">  <span class="comment">//表示这个用户有这个权限,说明此用户的二进制包含了authority类型里的这个权限</span></span><br><span class="line">  <span class="comment">// 例如:当用户的权限二进制为0011时,包含了read的二进制0001</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((user.<span class="property">authority</span> &amp; authority.<span class="property">write</span>) === authority.<span class="property">write</span>) &#123;</span><br><span class="line">  <span class="comment">// 写权限</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 因为用户权限的的二进制为0011,同时包含了read,write,所以这里会同时打印1和2</span></span><br></pre></td></tr></table></figure><h1 id="type-和-interface"><a href="#type-和-interface" class="headerlink" title="type 和 interface"></a>type 和 interface</h1><h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><font color="blue">type用于给一个类型去一个别名,例如:</font><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="built_in">number</span></span><br><span class="line"><span class="comment">// 把A做了一个初始化,他的值就等于所以属于number这个属性的值</span></span><br><span class="line">*注意* <span class="keyword">type</span>无法重复声明</span><br><span class="line"><span class="keyword">type</span> A = <span class="built_in">string</span> <span class="comment">// 这里会报错,因为A已经声明成number了</span></span><br><span class="line"><span class="comment">//  可以使用交集</span></span><br><span class="line"><span class="keyword">type</span> B = A &amp; <span class="built_in">string</span> <span class="comment">// 这样B的值就等于number+string两个集合</span></span><br></pre></td></tr></table></figure><h2 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h2><font color="blue">interface用于声明接口(描述对象的属性),例如:</font><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="comment">// 索引签名的方式描述</span></span><br><span class="line">  <span class="comment">// [k: string]: number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 描述数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> B <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; &#123;</span><br><span class="line">  <span class="comment">// 额外的属性</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// type写法:</span></span><br><span class="line"><span class="comment">/* type B = Array&lt;string&gt; &#123;</span></span><br><span class="line"><span class="comment">  // 额外的属性</span></span><br><span class="line"><span class="comment">  name: string</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 描述函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Fn</span> &#123;</span><br><span class="line">  <span class="comment">// 括号里是参数,冒号后面是返回值的类型</span></span><br><span class="line">  (<span class="attr">a</span>: <span class="built_in">string</span>): <span class="built_in">void</span></span><br><span class="line">  <span class="comment">// 额外的属性</span></span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">Fn</span> = <span class="function"><span class="params">a</span> =&gt;</span> &#123;&#125;</span><br><span class="line">a.<span class="property">b</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 描述日期</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> C <span class="keyword">extends</span> <span class="title class_">Date</span> &#123;&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">c</span>: C = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br></pre></td></tr></table></figure><font color="red">type和interface的区别</font><br><font color="pink">区别1:interface只描述对象,type可以描述所有类型<br>区别2:type只是别名,interface是类型声明(面试可能问,我们实际使用基本无法感觉到差别)<br>区别3:type无法重新赋值(缺点是无法扩展),interface可以</font><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span>会自动合并, type不会</span><br><span class="line">例: <span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">c</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// A最终的类型是a,b,c的集合</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简介</title>
      <link href="/post/28581.html"/>
      <url>/post/28581.html</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><hr><p><font color="Blue" size="4">你好,我是一名正在不断学习中的前端工程师,我比较懒,可能是因为我的追求没有那么高,有时候敲代码会发现时间过得很快,希望自己能越来越好吧<br></font></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>typescript笔记(1)-类型的描述</title>
      <link href="/post/60349.html"/>
      <url>/post/60349.html</url>
      
        <content type="html"><![CDATA[<h1 id="ts-的类型"><a href="#ts-的类型" class="headerlink" title="ts 的类型"></a>ts 的类型</h1><hr><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ts包含了js所有类型并且新增了<span class="number">7</span>个类型, 分别是:</span><br><span class="line"><span class="built_in">void</span>,<span class="built_in">never</span>,<span class="keyword">enum</span>,<span class="built_in">unknown</span>,<span class="built_in">any</span></span><br><span class="line">两个自定义类型:</span><br><span class="line"><span class="keyword">type</span>,<span class="keyword">interface</span></span><br></pre></td></tr></table></figure><h2 id="正常情况下不用-object-因为-object-包含了-Array-Number-Function"><a href="#正常情况下不用-object-因为-object-包含了-Array-Number-Function" class="headerlink" title="正常情况下不用 object,因为 object 包含了 Array,Number,Function"></a><font color="red" size="4">正常情况下不用 object,因为 object 包含了 Array,Number,Function</font></h2><hr><h1 id="用类型签名和-Record-描述对象"><a href="#用类型签名和-Record-描述对象" class="headerlink" title="用类型签名和 Record 描述对象"></a>用类型签名和 Record 描述对象</h1><hr><h3 id="用-class-描述"><a href="#用-class-描述" class="headerlink" title="用 class 描述"></a>用 class 描述</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const a: Function = () =&gt; &#123;&#125;</span><br><span class="line">:号后面是变量a指定的类型</span><br></pre></td></tr></table></figure><h3 id="用-type-描述"><a href="#用-type-描述" class="headerlink" title="用 type 描述"></a>用 type 描述</h3><h4 id="第一种写法"><a href="#第一种写法" class="headerlink" title="第一种写法"></a>第一种写法</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;老王&#x27;</span></span><br><span class="line">  <span class="attr">age</span>:<span class="number">22</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第二种写法"><a href="#第二种写法" class="headerlink" title="第二种写法"></a>第二种写法</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = &#123;</span><br><span class="line">  [<span class="attr">k</span>: <span class="built_in">string</span>]: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// k 可以是任意字母,表示键,后面是类型</span></span><br><span class="line"><span class="comment">// 可以做键的类型有string,symbol,number</span></span><br></pre></td></tr></table></figure><p><font color="blue" size="4"><strong>注意</strong>:</font> 因为在 js 里,数字最终会变成字符串,所以也可以写成数字,如:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: A = &#123;</span><br><span class="line">  <span class="number">123</span>: <span class="number">123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第三种写法"><a href="#第三种写法" class="headerlink" title="第三种写法:"></a>第三种写法:</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">A2</span> = <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt;</span><br><span class="line">等同于第二种写法</span><br><span class="line"><span class="comment">// Record是一种泛型</span></span><br></pre></td></tr></table></figure><p><font color="#FF69B4">当我们用 object 类型去声明变量的时候,值可以为任何,因为 js 会包装对象,例如:</font></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="built_in">object</span> = <span class="number">123</span> <span class="comment">//这段代码不会报错,因为js把123包装成了对象</span></span><br><span class="line"><span class="comment">// 所以我们一般不使用object类型</span></span><br></pre></td></tr></table></figure><hr><hr><h3 id="数组对象的描述"><a href="#数组对象的描述" class="headerlink" title="数组对象的描述"></a>数组对象的描述</h3><h4 id="第一种写法-1"><a href="#第一种写法-1" class="headerlink" title="第一种写法"></a>第一种写法</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型加上[]</span></span><br><span class="line"><span class="keyword">type</span> A = <span class="built_in">string</span>[]</span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: A = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B = <span class="built_in">number</span>[]</span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: B = [<span class="number">42</span>, <span class="number">50</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 固定长度和类型,称为元组,几个元素为几元组</span></span><br><span class="line"><span class="keyword">type</span> C = [<span class="built_in">string</span>, <span class="built_in">string</span>]</span><br><span class="line"><span class="keyword">const</span> <span class="attr">arr</span>: C = [<span class="string">&#x27;我&#x27;</span>, <span class="string">&#x27;爱&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="第二种写法-1"><a href="#第二种写法-1" class="headerlink" title="第二种写法"></a>第二种写法</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt;</span><br><span class="line"><span class="keyword">type</span> B = <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt;</span><br><span class="line"><span class="comment">// 等价于第一种写法的类型加[]</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多层数组嵌套</span></span><br><span class="line"><span class="keyword">type</span> A = [<span class="built_in">string</span>[], <span class="built_in">number</span>[]]</span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: A = [</span><br><span class="line">  [<span class="string">&#x27;柴&#x27;</span>, <span class="string">&#x27;米&#x27;</span>, <span class="string">&#x27;油&#x27;</span>, <span class="string">&#x27;盐&#x27;</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><hr><h2 id="函数对象的描述"><a href="#函数对象的描述" class="headerlink" title="函数对象的描述"></a>函数对象的描述</h2><h4 id="第一种写法-2"><a href="#第一种写法-2" class="headerlink" title="第一种写法"></a>第一种写法</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明参数的个数,类型,函数返回值的类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FnA</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FnB</span> = <span class="function">(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">FnA</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: <span class="title class_">FnB</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;我&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="red">  注意, 使用函数的时候, 参数可以少传, 但不能多传 调用的时候必须和声明的参数个数和类型一样</font><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">a</span>(<span class="number">1</span>) <span class="comment">//这样会报错,因为只传了一个参数</span></span><br></pre></td></tr></table></figure><p><font color="#8B008B">当函数没有返回值的时候,我们可以这样写:<br></font></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">FnReturnVoid</span> = <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br></pre></td></tr></table></figure><h1 id="any-和-unknown"><a href="#any-和-unknown" class="headerlink" title="any 和 unknown"></a>any 和 unknown</h1><p><font color="blue">any 表示所有类型的集合,当声明为 any 时,值可以是任意类型</font></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="built_in">any</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p><font color="pink">unknown 表示事先并不知道这个值的类型,后续也可以通过断言追加类型</font></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: <span class="built_in">unknown</span> = <span class="number">1</span></span><br><span class="line">b.<span class="title function_">toFixed</span>() <span class="comment">// 会报错,因为类型是unknown,不知道类型,不能使用toFixed方法</span></span><br><span class="line"><span class="comment">//追加类型</span></span><br><span class="line">;(b <span class="keyword">as</span> <span class="built_in">number</span>) = <span class="number">1</span> <span class="comment">// 使用断言可以让b的类型变成number,则可以使用toFixed方法</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
