<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TS笔记(2)</title>
      <link href="/post/59739.html"/>
      <url>/post/59739.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>简介</title>
      <link href="/post/28581.html"/>
      <url>/post/28581.html</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><hr><p><font color="Blue" size="4">你好,我是一名正在不断学习中的前端工程师,我比较懒,可能是因为我的追求没有那么高,有时候敲代码会发现时间过得很快,希望自己能越来越好吧<br></font></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2</title>
      <link href="/post/undefined.html"/>
      <url>/post/undefined.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>typescript笔记(1)</title>
      <link href="/post/60349.html"/>
      <url>/post/60349.html</url>
      
        <content type="html"><![CDATA[<h1 id="ts-的类型"><a href="#ts-的类型" class="headerlink" title="ts 的类型"></a>ts 的类型</h1><hr><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ts包含了js所有类型并且新增了<span class="number">7</span>个类型, 分别是:</span><br><span class="line"><span class="built_in">void</span>,<span class="built_in">never</span>,<span class="keyword">enum</span>,<span class="built_in">unknown</span>,<span class="built_in">any</span></span><br><span class="line">两个自定义类型:</span><br><span class="line"><span class="keyword">type</span>,<span class="keyword">interface</span></span><br></pre></td></tr></table></figure><h2 id="正常情况下不用-object-因为-object-包含了-Array-Number-Function"><a href="#正常情况下不用-object-因为-object-包含了-Array-Number-Function" class="headerlink" title="正常情况下不用 object,因为 object 包含了 Array,Number,Function"></a><font color="red" size="4">正常情况下不用 object,因为 object 包含了 Array,Number,Function</font></h2><hr><h1 id="用类型签名和-Record-描述对象"><a href="#用类型签名和-Record-描述对象" class="headerlink" title="用类型签名和 Record 描述对象"></a>用类型签名和 Record 描述对象</h1><hr><h3 id="用-class-描述"><a href="#用-class-描述" class="headerlink" title="用 class 描述"></a>用 class 描述</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const a: Function = () =&gt; &#123;&#125;</span><br><span class="line">:号后面是变量a指定的类型</span><br></pre></td></tr></table></figure><h3 id="用-type-描述"><a href="#用-type-描述" class="headerlink" title="用 type 描述"></a>用 type 描述</h3><h4 id="第一种写法"><a href="#第一种写法" class="headerlink" title="第一种写法"></a>第一种写法</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;老王&#x27;</span></span><br><span class="line">  <span class="attr">age</span>:<span class="number">22</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第二种写法"><a href="#第二种写法" class="headerlink" title="第二种写法"></a>第二种写法</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = &#123;</span><br><span class="line">  [<span class="attr">k</span>: <span class="built_in">string</span>]: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// k 可以是任意字母,表示键,后面是类型</span></span><br><span class="line"><span class="comment">// 可以做键的类型有string,symbol,number</span></span><br></pre></td></tr></table></figure><p><font color="blue" size="4"><strong>注意</strong>:</font> 因为在 js 里,数字最终会变成字符串,所以也可以写成数字,如:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: A = &#123;</span><br><span class="line">  <span class="number">123</span>: <span class="number">123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第三种写法"><a href="#第三种写法" class="headerlink" title="第三种写法:"></a>第三种写法:</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">A2</span> = <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt;</span><br><span class="line">等同于第二种写法</span><br><span class="line"><span class="comment">// Record是一种泛型</span></span><br></pre></td></tr></table></figure><p><font color="#FF69B4">当我们用 object 类型去声明变量的时候,值可以为任何,因为 js 会包装对象,例如:</font></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="built_in">object</span> = <span class="number">123</span> <span class="comment">//这段代码不会报错,因为js把123包装成了对象</span></span><br><span class="line"><span class="comment">// 所以我们一般不使用object类型</span></span><br></pre></td></tr></table></figure><hr><hr><h3 id="数组对象的描述"><a href="#数组对象的描述" class="headerlink" title="数组对象的描述"></a>数组对象的描述</h3><h4 id="第一种写法-1"><a href="#第一种写法-1" class="headerlink" title="第一种写法"></a>第一种写法</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型加上[]</span></span><br><span class="line"><span class="keyword">type</span> A = <span class="built_in">string</span>[]</span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: A = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B = <span class="built_in">number</span>[]</span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: B = [<span class="number">42</span>, <span class="number">50</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 固定长度和类型,称为元组,几个元素为几元组</span></span><br><span class="line"><span class="keyword">type</span> C = [<span class="built_in">string</span>, <span class="built_in">string</span>]</span><br><span class="line"><span class="keyword">const</span> <span class="attr">arr</span>: C = [<span class="string">&#x27;我&#x27;</span>, <span class="string">&#x27;爱&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="第二种写法-1"><a href="#第二种写法-1" class="headerlink" title="第二种写法"></a>第二种写法</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt;</span><br><span class="line"><span class="keyword">type</span> B = <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt;</span><br><span class="line"><span class="comment">// 等价于第一种写法的类型加[]</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多层数组嵌套</span></span><br><span class="line"><span class="keyword">type</span> A = [<span class="built_in">string</span>[], <span class="built_in">number</span>[]]</span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: A = [</span><br><span class="line">  [<span class="string">&#x27;柴&#x27;</span>, <span class="string">&#x27;米&#x27;</span>, <span class="string">&#x27;油&#x27;</span>, <span class="string">&#x27;盐&#x27;</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><hr><h2 id="函数对象的描述"><a href="#函数对象的描述" class="headerlink" title="函数对象的描述"></a>函数对象的描述</h2><h4 id="第一种写法-2"><a href="#第一种写法-2" class="headerlink" title="第一种写法"></a>第一种写法</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明参数的个数,类型,函数返回值的类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FnA</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FnB</span> = <span class="function">(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">FnA</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: <span class="title class_">FnB</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;我&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="red">  注意, 使用函数的时候, 参数可以少传, 但不能多传 调用的时候必须和声明的参数个数和类型一样</font><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">a</span>(<span class="number">1</span>) <span class="comment">//这样会报错,因为只传了一个参数</span></span><br></pre></td></tr></table></figure><p><font color="#8B008B">当函数没有返回值的时候,我们可以这样写:<br></font></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">FnReturnVoid</span> = <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
